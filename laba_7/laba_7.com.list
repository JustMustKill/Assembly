EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
laba_7.com -- emu8086 assembler version: 4.05  
 
[ 4/26/2020  --  9:42:36 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model tiny
[   2]    0180:                                       .code
[   3]        :                                       org 80h			;смещение 80h от начала PSP
[   4]    0100: 00                                    cmd_length db ?		;длина командной строки
[   5]    0101: 00                                    cmd_line db ?		;командная строка
[   6]        :                                       org 100h			;смещение сегмента кода на 100h, СОМ-программа
[   7]    0180:                                       start:
[   8]    0180: E5                                    cld
[   9]    0181: 02 BC                                 mov bp,sp
[  10]    0183: E9 04 B4 4A                           mov cl,cmd_length
[  11]    0187: BB E9 04                              cmp cl,1         ;проверка длины командной строки
[  12]    018A: CD 21 8C C8 A3                        jle exit         ;выход из программы
[  13]        :                                       
[  14]    018F: BD 01 A3                              mov cx,-1
[  15]    0192: C1 01 A3                              mov di,offset cmd_line    ;начало командной строки
[  16]    0195:                                       find_param:          ;пропускаем первые пробелы
[  17]    0195: C5 01                                 mov al,' '
[  18]    0197: 8B 0E                                 repz scasb
[  19]    0199: E5                                    dec di
[  20]    019A: 02                                    push di
[  21]    019B: B8 00 4B BA                           inc word ptr argc
[  22]    019F: 82 00                                 mov si,di       ;устанавливаем в si текущее смещение командной строки
[  23]    01A1:                                       scan_params:
[  24]    01A1: BB                                    lodsb           ;загружаем символ из строки
[  25]    01A2: B9 01                                 cmp al,0Dh      ;проверяем на конец строки
[  26]    01A4: CD 21                                 je params_ended
[  27]    01A6: 73 07                                 cmp al,20h      ;проверяем на пробел
[  28]    01A8: B4 09                                 jne scan_params ;если обнаружен пробел – анализируем следующий параметр
[  29]    01AA: BA                                    dec si
[  30]    01AB: B1 01 CD                              mov byte ptr [si],0   ;записываем в конец текущего параметра 0
[  31]    01AE: 21 E2                                 mov di,si
[  32]    01B0: EA                                    inc di
[  33]    01B1: CD 20                                 jmp short next_param   ;продолжаем  поиск параметров
[  34]    01B3:                                       params_ended:
[  35]    01B3: 65                                    dec si
[  36]    01B4: 72 72 6F                              mov byte ptr [si],0    ;устанавливаем в конец строки 0
[  37]        :                                       
[  38]        :                                       
[  39]        :                                       ;получаем второй параметр - кол-во раз, кот-е нужно запустить
[  40]    01B7:                                       next_param:           ;пропускаем первые пробелы
[  41]    01B7: 72 0A                                 mov al,' '
[  42]    01B9: 0D 24                                 repe scasb
[  43]    01BB: 00                                    dec di
[  44]    01BC: 00 C7 01 00                           inc word ptr argc
[  45]    01C0: 00 5C                                 mov si, di        ;устанавливаем в si текущее смещение командной строки
[  46]    01C2: 00 00 00                              mov di, offset number
[  47]    01C5:                                       scan_param:
[  48]    01C5: 6C 00 00                              cmp [si],0Dh      ;проверяем на конец строки
[  49]    01C8: 00 7D                                 je param_ended
[  50]    01CA: 20 2F 3F                              cmp [si],20h      ;проверяем на пробел
[  51]    01CD: 00 00                                 je param_ended
[  52]    01CF: 00                                    movsb
[  53]    01D0: 00 00                                 jmp scan_param
[  54]    01D2:                                       param_ended:
[  55]    01D2: 00 00 00                              mov byte ptr [si],0     ;устанавливаем в конец строки 0
[  56]        :                                       
[  57]    01D5: 00 00 00                              mov si, offset number
[  58]        :                                       
[  59]    01D8:                                       string_to_num:
[  60]    01D8: 00 00                                 xor dx,dx
[  61]    01DA:                                       loop_:
[  62]    01DA: 00 00                                 xor ax,ax
[  63]    01DC: 00                                    lodsb
[  64]    01DD: 00 00                                 test al,al
[  65]    01DF: 00 00                                 jz  ex
[  66]    01E1: 00 00                                 cmp al,'9'
[  67]    01E3: 00 00                                 jnbe  loop_
[  68]    01E5: 00 00                                 cmp al,'0'
[  69]    01E7: 00 00                                 jb    loop_
[  70]    01E9: 00 00 00                              sub ax,'0'
[  71]        :                                       
[  72]    01EC: 00                                    push ax
[  73]    01ED: 00 00                                 mov ax, dx
[  74]    01EF: 00 00 00                              mov dx, 10
[  75]    01F2: 00 00                                 mul dx
[  76]    01F4: 00 00                                 mov dx, ax
[  77]    01F6: 00                                    pop ax
[  78]    01F7: 00 00                                 add dx, ax
[  79]    01F9: 00 00                                 jmp  loop_
[  80]    01FB:                                       ex:
[  81]    01FB: 00 00                                 mov ax,dx
[  82]    01FD: 00 00 00                              mov num, ax
[  83]        :                                       
[  84]        :                                       
[  85]        :                                       ;перемещение стека на 200h после окончания сегмента программы
[  86]    0200: 00 00 00                              mov sp, program_length+100H+200H
[  87]        :                                       
[  88]        :                                       ;освободить всю память программы после ее окончания
[  89]    0203: 00 00                                 mov ah, 4Ah
[  90]        :                                       stack_offset = program_length+ 100h + 200h
[  91]    0205: 00 00 00                              mov bx, stack_offset shr 4 + 1     ; размер в параграфах + 1
[  92]    0208: 00 00                                 int 21h
[  93]        :                                       
[  94]        :                                       ; заполняем поля структуры EPB
[  95]    020A: 00 00                                 mov ax,cs
[  96]    020C: 00 00 00                              mov word ptr EPB+4,ax   ; сегмент командной строки
[  97]    020F: 00 00 00                              mov word ptr EPB+8,ax     ; сегмент первого FCB
[  98]    0212: 00 00 00                              mov word ptr EPB+0Ch,ax    ; сегмент второго FCB
[  99]        :                                       
[ 100]    0215: 00 00 00 00                           mov cx, num    ;количество запусков программы
[ 101]    0219:                                       cycle:
[ 102]    0219: 00 00 00                              mov ax,4B00h		;функция DOS 4Bh
[ 103]    021C: 00 00 00                              mov dx, offset cmd_line+1	;начало командной строки, путь к файлу
[ 104]        :                                       
[ 105]    021F: 00 00 00                              mov bx, offset EPB		;блок EPB
[ 106]    0222: 00 00                                 int 21h             ; запустить программу
[ 107]    0224: 00 00                                 jnc next			;в случае ошибки – вывод сообщения
[ 108]    0226: 00 00                                 mov ah,9
[ 109]    0228: 00 00 00                              lea dx, error
[ 110]    022B: 00 00                                 int 21h
[ 111]    022D:                                       next:
[ 112]    022D: 00 00                                 loop cycle
[ 113]        :                                       
[ 114]    022F:                                       exit:
[ 115]    022F: 00 00                                 int 20h	;выход из программы 20 прерывание, т.к. стек перемещен, ret нельзя - стек перемещен
[ 116]        :                                       
[ 117]    0231: 00 00 00 00 00 00 00 00               error db "error",10,13,'$'     ;сообщение об ошибке
[ 118]    0239: 00 00                                 EPB dw 0000                    ;текущее окружение
[ 119]    023B: 00 00 00 00                           dw offset commandline,0        ;адрес командной строки
[ 120]    023F: 00 00 00 00 00 00 00 00               dw 005Ch,0,006Ch,0             ;адреса FCB программы
[ 121]    0247: 00                                    commandline db 125             ;длина командной строки
[ 122]    0248: 00 00 00                              db " /?"                       ; командная строка (3)
[ 123]    024B: 00 00 00 00 00 00 00 00 00 00 00 00   command_text db 122 dup(?)     ; командная строки (122)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00                               
[ 124]    02C5: 00 00 00 00 00 00 00 00 00 00 00 00   programm db 80 dup(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00             
[ 125]    0315: 00 00 00 00 00 00 00 00 00 00 00 00   number db 80 dup(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00             
[ 126]    0365: 00 00                                 num dw 0
[ 127]    0367: 00 00                                 argc dw 0
[ 128]    0369:                                       program_length equ $-start     ; длина программы
[ 129]        :                                       end start
[ 130]        :                                       
 
===================================================================================================
 




===================================================================================================
